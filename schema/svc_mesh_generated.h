// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SVCMESH_SERVICE_MESH_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SVCMESH_SERVICE_MESH_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace service {
namespace mesh {
namespace schema {

struct Mesh;

struct Manifest;

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MeshBuilder &operator=(const MeshBuilder &);
  flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(
    flatbuffers::FlatBufferBuilder &_fbb) {
  MeshBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Manifest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESHES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Mesh>> *meshes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Mesh>> *>(VT_MESHES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESHES) &&
           verifier.VerifyVector(meshes()) &&
           verifier.VerifyVectorOfTables(meshes()) &&
           verifier.EndTable();
  }
};

struct ManifestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_meshes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Mesh>>> meshes) {
    fbb_.AddOffset(Manifest::VT_MESHES, meshes);
  }
  explicit ManifestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ManifestBuilder &operator=(const ManifestBuilder &);
  flatbuffers::Offset<Manifest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Manifest>(end);
    return o;
  }
};

inline flatbuffers::Offset<Manifest> CreateManifest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Mesh>>> meshes = 0) {
  ManifestBuilder builder_(_fbb);
  builder_.add_meshes(meshes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Manifest> CreateManifestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Mesh>> *meshes = nullptr) {
  return service::mesh::schema::CreateManifest(
      _fbb,
      meshes ? _fbb.CreateVector<flatbuffers::Offset<Mesh>>(*meshes) : 0);
}

inline const service::mesh::schema::Manifest *GetManifest(const void *buf) {
  return flatbuffers::GetRoot<service::mesh::schema::Manifest>(buf);
}

inline const service::mesh::schema::Manifest *GetSizePrefixedManifest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<service::mesh::schema::Manifest>(buf);
}

inline bool VerifyManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<service::mesh::schema::Manifest>(nullptr);
}

inline bool VerifySizePrefixedManifestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<service::mesh::schema::Manifest>(nullptr);
}

inline void FinishManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<service::mesh::schema::Manifest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedManifestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<service::mesh::schema::Manifest> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace schema
}  // namespace mesh
}  // namespace service

#endif  // FLATBUFFERS_GENERATED_SVCMESH_SERVICE_MESH_SCHEMA_H_
