namespace service.mesh.schema;

enum StreamFormat:byte {
    Invalid,
    Float,
    Vector4,
    Vector3,
    Vector2,
    Int,
    Int3,
}

enum StreamType:byte {
    Positions,
    Normals,
    Tangents,
    Bitangents,
    TextureCoordinates,
    Colors,
    Indices,
}

enum AnimationType:byte {
    None,
    Rigid,
    Skinned,
}

table Animation {

}

table MeshStream {
    type:StreamType;
    format:StreamFormat;
    elements:uint64;
    data:[ubyte];
}

table MeshMaterial {
    name:string;
    material:string;
    albedo_tint:Vector3;
    roughness:float32;
}

table MeshPart {
    index_start:uint32;
    index_count:uint32;
    material_index:int32;
    node_index:int32;
    base_transform:[float32];
    name:string;
    animation_type:AnimationType;
}

table Vector3 {
    x:float32;
    y:float32;
    z:float32;
}

table Mesh {
    name:string;
    identity:string;
    parts:[MeshPart];
    materials:[MeshMaterial];
    streams:[MeshStream];
    skinning_data:[ubyte];
    //std::map<std::string, uint32> bones;
    animations:[Animation];
    bounding_min:Vector3;
    bounding_max:Vector3;
}

table Manifest {
    meshes:[Mesh];
}

root_type Manifest;